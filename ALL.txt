# Clean Architecture - Projet Club de Sport

## Structure du projet
```
src/
├── main/
│   ├── java/
│   │   └── com/
│   │       └── monclub/
│   │           ├── domain/
│   │           │   ├── entities/
│   │           │   │   └── Membre.java
│   │           │   ├── repositories/
│   │           │   │   └── MembreRepository.java
│   │           │   └── usecases/
│   │           │       ├── AuthenticateUserUseCase.java
│   │           │       ├── RegisterUserUseCase.java
│   │           │       └── GetAllMembersUseCase.java
│   │           ├── application/
│   │           │   ├── services/
│   │           │   │   └── AuthenticationService.java
│   │           │   └── dto/
│   │           │       ├── LoginRequest.java
│   │           │       ├── RegisterRequest.java
│   │           │       └── AuthenticationResult.java
│   │           ├── infrastructure/
│   │           │   ├── database/
│   │           │   │   ├── DatabaseConnection.java
│   │           │   │   └── MySQLMembreRepository.java
│   │           │   ├── security/
│   │           │   │   └── PasswordEncoder.java
│   │           │   └── config/
│   │           │       └── DatabaseConfig.java
│   │           └── presentation/
│   │               ├── controllers/
│   │               │   ├── AuthController.java
│   │               │   ├── AdminController.java
│   │               │   └── HomeController.java
│   │               ├── filters/
│   │               │   └── SecurityFilter.java
│   │               └── servlets/
│   │                   ├── ConnexionServlet.java
│   │                   ├── InscriptionServlet.java
│   │                   ├── AdminServlet.java
│   │                   ├── AccueilServlet.java
│   │                   └── DeconnexionServlet.java
│   │           └── Main.java
│   └── webapp/
│       ├── WEB-INF/
│       │   ├── web.xml
│       │   ├── accueil.jsp
│       │   ├── admin.jsp
│       │   └── connexionXinscription.jsp
│       ├── index.jsp
│       ├── style.css
│       └── script.js
└── resources/
    └── db.properties
```

## 1. Domain Layer - Entities

### Membre.java
```java
package com.monclub.domain.entities;

public class Membre {
    private int id;
    private String nom;
    private String prenom;
    private String email;
    private String motDePasse;
    private String typeAbonnement;
    private String role;

    // Constructeurs
    public Membre() {}

    public Membre(String nom, String prenom, String email, String motDePasse, 
                  String typeAbonnement, String role) {
        this.nom = nom;
        this.prenom = prenom;
        this.email = email;
        this.motDePasse = motDePasse;
        this.typeAbonnement = typeAbonnement;
        this.role = role;
    }

    // Business logic methods
    public boolean isAdmin() {
        return "admin".equalsIgnoreCase(this.role);
    }

    public boolean hasValidEmail() {
        return email != null && email.contains("@");
    }

    // Getters et Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    
    public String getNom() { return nom; }
    public void setNom(String nom) { this.nom = nom; }
    
    public String getPrenom() { return prenom; }
    public void setPrenom(String prenom) { this.prenom = prenom; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getMotDePasse() { return motDePasse; }
    public void setMotDePasse(String motDePasse) { this.motDePasse = motDePasse; }
    
    public String getTypeAbonnement() { return typeAbonnement; }
    public void setTypeAbonnement(String typeAbonnement) { this.typeAbonnement = typeAbonnement; }
    
    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }
}
```

## 2. Domain Layer - Repository Interface

### MembreRepository.java
```java
package com.monclub.domain.repositories;

import com.monclub.domain.entities.Membre;
import java.util.List;
import java.util.Optional;

public interface MembreRepository {
    Optional<Membre> findByEmail(String email);
    List<Membre> findAll();
    void save(Membre membre);
    Optional<Membre> findById(int id);
    void update(Membre membre);
    void delete(int id);
}
```

## 3. Domain Layer - Use Cases

### AuthenticateUserUseCase.java
```java
package com.monclub.domain.usecases;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import com.monclub.infrastructure.security.PasswordEncoder;
import java.util.Optional;

public class AuthenticateUserUseCase {
    private final MembreRepository membreRepository;
    private final PasswordEncoder passwordEncoder;

    public AuthenticateUserUseCase(MembreRepository membreRepository, PasswordEncoder passwordEncoder) {
        this.membreRepository = membreRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public Optional<Membre> execute(String email, String password) {
        Optional<Membre> membre = membreRepository.findByEmail(email);
        
        if (membre.isPresent() && passwordEncoder.matches(password, membre.get().getMotDePasse())) {
            return membre;
        }
        
        return Optional.empty();
    }
}
```

### RegisterUserUseCase.java
```java
package com.monclub.domain.usecases;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import com.monclub.infrastructure.security.PasswordEncoder;

public class RegisterUserUseCase {
    private final MembreRepository membreRepository;
    private final PasswordEncoder passwordEncoder;

    public RegisterUserUseCase(MembreRepository membreRepository, PasswordEncoder passwordEncoder) {
        this.membreRepository = membreRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public void execute(Membre membre) {
        // Validate business rules
        if (!membre.hasValidEmail()) {
            throw new IllegalArgumentException("Email invalide");
        }

        // Check if user already exists
        if (membreRepository.findByEmail(membre.getEmail()).isPresent()) {
            throw new IllegalArgumentException("Un utilisateur avec cet email existe déjà");
        }

        // Encode password
        String encodedPassword = passwordEncoder.encode(membre.getMotDePasse());
        membre.setMotDePasse(encodedPassword);

        // Save member
        membreRepository.save(membre);
    }
}
```

### GetAllMembersUseCase.java
```java
package com.monclub.domain.usecases;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import java.util.List;

public class GetAllMembersUseCase {
    private final MembreRepository membreRepository;

    public GetAllMembersUseCase(MembreRepository membreRepository) {
        this.membreRepository = membreRepository;
    }

    public List<Membre> execute() {
        return membreRepository.findAll();
    }
}
```

## 4. Application Layer - DTOs

### LoginRequest.java
```java
package com.monclub.application.dto;

public class LoginRequest {
    private String email;
    private String motDePasse;

    public LoginRequest() {}

    public LoginRequest(String email, String motDePasse) {
        this.email = email;
        this.motDePasse = motDePasse;
    }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getMotDePasse() { return motDePasse; }
    public void setMotDePasse(String motDePasse) { this.motDePasse = motDePasse; }
}
```

### RegisterRequest.java
```java
package com.monclub.application.dto;

public class RegisterRequest {
    private String nom;
    private String prenom;
    private String email;
    private String motDePasse;
    private String typeAbonnement;

    public RegisterRequest() {}

    // Getters et Setters
    public String getNom() { return nom; }
    public void setNom(String nom) { this.nom = nom; }
    
    public String getPrenom() { return prenom; }
    public void setPrenom(String prenom) { this.prenom = prenom; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getMotDePasse() { return motDePasse; }
    public void setMotDePasse(String motDePasse) { this.motDePasse = motDePasse; }
    
    public String getTypeAbonnement() { return typeAbonnement; }
    public void setTypeAbonnement(String typeAbonnement) { this.typeAbonnement = typeAbonnement; }
}
```

### AuthenticationResult.java
```java
package com.monclub.application.dto;

import com.monclub.domain.entities.Membre;

public class AuthenticationResult {
    private boolean success;
    private Membre membre;
    private String errorMessage;

    public AuthenticationResult(boolean success, Membre membre) {
        this.success = success;
        this.membre = membre;
    }

    public AuthenticationResult(boolean success, String errorMessage) {
        this.success = success;
        this.errorMessage = errorMessage;
    }

    public boolean isSuccess() { return success; }
    public Membre getMembre() { return membre; }
    public String getErrorMessage() { return errorMessage; }
}
```

## 5. Application Layer - Services

### AuthenticationService.java
```java
package com.monclub.application.services;

import com.monclub.application.dto.LoginRequest;
import com.monclub.application.dto.RegisterRequest;
import com.monclub.application.dto.AuthenticationResult;
import com.monclub.domain.entities.Membre;
import com.monclub.domain.usecases.AuthenticateUserUseCase;
import com.monclub.domain.usecases.RegisterUserUseCase;
import java.util.Optional;

public class AuthenticationService {
    private final AuthenticateUserUseCase authenticateUserUseCase;
    private final RegisterUserUseCase registerUserUseCase;

    public AuthenticationService(AuthenticateUserUseCase authenticateUserUseCase, 
                               RegisterUserUseCase registerUserUseCase) {
        this.authenticateUserUseCase = authenticateUserUseCase;
        this.registerUserUseCase = registerUserUseCase;
    }

    public AuthenticationResult login(LoginRequest request) {
        try {
            Optional<Membre> membre = authenticateUserUseCase.execute(request.getEmail(), request.getMotDePasse());
            
            if (membre.isPresent()) {
                return new AuthenticationResult(true, membre.get());
            } else {
                return new AuthenticationResult(false, "Email ou mot de passe incorrect");
            }
        } catch (Exception e) {
            return new AuthenticationResult(false, "Erreur lors de la connexion");
        }
    }

    public AuthenticationResult register(RegisterRequest request) {
        try {
            Membre membre = new Membre(
                request.getNom(),
                request.getPrenom(),
                request.getEmail(),
                request.getMotDePasse(),
                request.getTypeAbonnement(),
                "membre" // default role
            );

            registerUserUseCase.execute(membre);
            return new AuthenticationResult(true, membre);
        } catch (IllegalArgumentException e) {
            return new AuthenticationResult(false, e.getMessage());
        } catch (Exception e) {
            return new AuthenticationResult(false, "Erreur lors de l'inscription");
        }
    }
}
```

## 6. Infrastructure Layer - Database

### DatabaseConfig.java
```java
package com.monclub.infrastructure.config;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class DatabaseConfig {
    private static DatabaseConfig instance;
    private Properties properties;

    private DatabaseConfig() {
        loadProperties();
    }

    public static DatabaseConfig getInstance() {
        if (instance == null) {
            instance = new DatabaseConfig();
        }
        return instance;
    }

    private void loadProperties() {
        properties = new Properties();
        try (InputStream input = getClass().getClassLoader().getResourceAsStream("db.properties")) {
            if (input != null) {
                properties.load(input);
            }
        } catch (IOException e) {
            throw new RuntimeException("Erreur lors du chargement de la configuration de base de données", e);
        }
    }

    public String getUrl() {
        return properties.getProperty("db.url");
    }

    public String getUsername() {
        return properties.getProperty("db.username");
    }

    public String getPassword() {
        return properties.getProperty("db.password");
    }
}
```

### DatabaseConnection.java
```java
package com.monclub.infrastructure.database;

import com.monclub.infrastructure.config.DatabaseConfig;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final DatabaseConfig config = DatabaseConfig.getInstance();

    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            return DriverManager.getConnection(
                config.getUrl(),
                config.getUsername(),
                config.getPassword()
            );
        } catch (ClassNotFoundException e) {
            throw new SQLException("Driver MySQL non trouvé", e);
        }
    }
}
```

### MySQLMembreRepository.java
```java
package com.monclub.infrastructure.database;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class MySQLMembreRepository implements MembreRepository {

    @Override
    public Optional<Membre> findByEmail(String email) {
        String sql = "SELECT * FROM membres WHERE email = ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setString(1, email);
            ResultSet resultSet = statement.executeQuery();
            
            if (resultSet.next()) {
                return Optional.of(mapResultSetToMembre(resultSet));
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la recherche par email", e);
        }
        
        return Optional.empty();
    }

    @Override
    public List<Membre> findAll() {
        List<Membre> membres = new ArrayList<>();
        String sql = "SELECT * FROM membres";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {
            
            while (resultSet.next()) {
                membres.add(mapResultSetToMembre(resultSet));
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la récupération des membres", e);
        }
        
        return membres;
    }

    @Override
    public void save(Membre membre) {
        String sql = "INSERT INTO membres (nom, prenom, email, mot_de_passe, type_abonnement, role) VALUES (?, ?, ?, ?, ?, ?)";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            
            statement.setString(1, membre.getNom());
            statement.setString(2, membre.getPrenom());
            statement.setString(3, membre.getEmail());
            statement.setString(4, membre.getMotDePasse());
            statement.setString(5, membre.getTypeAbonnement());
            statement.setString(6, membre.getRole());
            
            int affectedRows = statement.executeUpdate();
            
            if (affectedRows > 0) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        membre.setId(generatedKeys.getInt(1));
                    }
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la sauvegarde du membre", e);
        }
    }

    @Override
    public Optional<Membre> findById(int id) {
        String sql = "SELECT * FROM membres WHERE id = ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setInt(1, id);
            ResultSet resultSet = statement.executeQuery();
            
            if (resultSet.next()) {
                return Optional.of(mapResultSetToMembre(resultSet));
            }
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la recherche par ID", e);
        }
        
        return Optional.empty();
    }

    @Override
    public void update(Membre membre) {
        String sql = "UPDATE membres SET nom = ?, prenom = ?, email = ?, mot_de_passe = ?, type_abonnement = ?, role = ? WHERE id = ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setString(1, membre.getNom());
            statement.setString(2, membre.getPrenom());
            statement.setString(3, membre.getEmail());
            statement.setString(4, membre.getMotDePasse());
            statement.setString(5, membre.getTypeAbonnement());
            statement.setString(6, membre.getRole());
            statement.setInt(7, membre.getId());
            
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la mise à jour du membre", e);
        }
    }

    @Override
    public void delete(int id) {
        String sql = "DELETE FROM membres WHERE id = ?";
        
        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {
            
            statement.setInt(1, id);
            statement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException("Erreur lors de la suppression du membre", e);
        }
    }

    private Membre mapResultSetToMembre(ResultSet resultSet) throws SQLException {
        Membre membre = new Membre();
        membre.setId(resultSet.getInt("id"));
        membre.setNom(resultSet.getString("nom"));
        membre.setPrenom(resultSet.getString("prenom"));
        membre.setEmail(resultSet.getString("email"));
        membre.setMotDePasse(resultSet.getString("mot_de_passe"));
        membre.setTypeAbonnement(resultSet.getString("type_abonnement"));
        membre.setRole(resultSet.getString("role"));
        return membre;
    }
}
```

## 7. Infrastructure Layer - Security

### PasswordEncoder.java
```java
package com.monclub.infrastructure.security;

import org.mindrot.jbcrypt.BCrypt;

public class PasswordEncoder {
    
    public String encode(String plainPassword) {
        return BCrypt.hashpw(plainPassword, BCrypt.gensalt());
    }
    
    public boolean matches(String plainPassword, String hashedPassword) {
        return BCrypt.checkpw(plainPassword, hashedPassword);
    }
}
```

## 8. Presentation Layer - Controllers

### AuthController.java
```java
package com.monclub.presentation.controllers;

import com.monclub.application.dto.LoginRequest;
import com.monclub.application.dto.RegisterRequest;
import com.monclub.application.dto.AuthenticationResult;
import com.monclub.application.services.AuthenticationService;
import com.monclub.domain.entities.Membre;
import jakarta.servlet.http.HttpSession;

public class AuthController {
    private final AuthenticationService authenticationService;

    public AuthController(AuthenticationService authenticationService) {
        this.authenticationService = authenticationService;
    }

    public AuthenticationResult login(LoginRequest request) {
        return authenticationService.login(request);
    }

    public AuthenticationResult register(RegisterRequest request) {
        return authenticationService.register(request);
    }

    public void createUserSession(HttpSession session, Membre membre) {
        session.setAttribute("utilisateurId", membre.getId());
        session.setAttribute("nom", membre.getNom());
        session.setAttribute("prenom", membre.getPrenom());
        session.setAttribute("email", membre.getEmail());
        session.setAttribute("typeAbonnement", membre.getTypeAbonnement());
        session.setAttribute("utilisateurRole", membre.getRole());
    }

    public void destroyUserSession(HttpSession session) {
        if (session != null) {
            session.invalidate();
        }
    }
}
```

### AdminController.java
```java
package com.monclub.presentation.controllers;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.usecases.GetAllMembersUseCase;
import java.util.List;

public class AdminController {
    private final GetAllMembersUseCase getAllMembersUseCase;

    public AdminController(GetAllMembersUseCase getAllMembersUseCase) {
        this.getAllMembersUseCase = getAllMembersUseCase;
    }

    public List<Membre> getAllMembers() {
        return getAllMembersUseCase.execute();
    }
}
```

### HomeController.java
```java
package com.monclub.presentation.controllers;

public class HomeController {
    
    public String getWelcomeMessage(String userRole) {
        if ("admin".equalsIgnoreCase(userRole)) {
            return "Bienvenue, Administrateur !";
        } else {
            return "Bienvenue au Club de Sport !";
        }
    }
}
```

## 9. Presentation Layer - Servlets (refactored)

### ConnexionServlet.java
```java
package com.monclub.presentation.servlets;

import java.io.IOException;
import com.monclub.application.dto.LoginRequest;
import com.monclub.application.dto.AuthenticationResult;
import com.monclub.presentation.controllers.AuthController;
import com.monclub.domain.entities.Membre;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/connexion")
public class ConnexionServlet extends HttpServlet {
    private AuthController authController;

    @Override
    public void init() throws ServletException {
        // Dependency injection would be handled by a DI container in a real application
        authController = ServletDependencyFactory.getAuthController();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        request.getRequestDispatcher("/WEB-INF/connexionXinscription.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        String email = request.getParameter("email");
        String motDePasse = request.getParameter("motDePasse");

        LoginRequest loginRequest = new LoginRequest(email, motDePasse);
        AuthenticationResult result = authController.login(loginRequest);

        if (result.isSuccess()) {
            Membre membre = result.getMembre();
            authController.createUserSession(request.getSession(), membre);

            // Redirection selon le rôle
            if (membre.isAdmin()) {
                response.sendRedirect(request.getContextPath() + "/admin");
            } else {
                response.sendRedirect(request.getContextPath() + "/accueil");
            }
        } else {
            request.setAttribute("errorMessage", result.getErrorMessage());
            request.getRequestDispatcher("/WEB-INF/connexionXinscription.jsp").forward(request, response);
        }
    }
}
```

### AdminServlet.java
```java
package com.monclub.presentation.servlets;

import java.io.IOException;
import java.util.List;
import com.monclub.domain.entities.Membre;
import com.monclub.presentation.controllers.AdminController;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/admin")
public class AdminServlet extends HttpServlet {
    private AdminController adminController;

    @Override
    public void init() throws ServletException {
        adminController = ServletDependencyFactory.getAdminController();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);

        if (session != null && "admin".equals(session.getAttribute("utilisateurRole"))) {
            try {
                List<Membre> membres = adminController.getAllMembers();
                request.setAttribute("membres", membres);
                request.getRequestDispatcher("/WEB-INF/admin.jsp").forward(request, response);
            } catch (Exception e) {
                response.getWriter().println("Erreur lors de la récupération des membres.");
            }
        } else {
            response.sendRedirect(request.getContextPath() + "/accueil");
        }
    }
}
```

### AccueilServlet.java
```java
package com.monclub.presentation.servlets;

import java.io.IOException;
import com.monclub.presentation.controllers.HomeController;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/accueil")
public class AccueilServlet extends HttpServlet {
    private HomeController homeController;

    @Override
    public void init() throws ServletException {
        homeController = ServletDependencyFactory.getHomeController();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        String userRole = (session != null) ? (String) session.getAttribute("utilisateurRole") : null;
        
        String welcomeMessage = homeController.getWelcomeMessage(userRole);
        request.setAttribute("welcomeMessage", welcomeMessage);
        
        request.getRequestDispatcher("/WEB-INF/accueil.jsp").forward(request, response);
    }
}
```

### DeconnexionServlet.java
```java
package com.monclub.presentation.servlets;

import java.io.IOException;
import com.monclub.presentation.controllers.AuthController;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/deconnexion")
public class DeconnexionServlet extends HttpServlet {
    private AuthController authController;

    @Override
    public void init() throws ServletException {
        authController = ServletDependencyFactory.getAuthController();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        authController.destroyUserSession(request.getSession(false));
        response.sendRedirect(request.getContextPath() + "/connexion");
    }
}
```

## 10. Dependency Factory (Simple DI)

### ServletDependencyFactory.java
```java
package com.monclub.presentation.servlets;

import com.monclub.application.services.AuthenticationService;
import com.monclub.domain.repositories.MembreRepository;
import com.monclub.domain.usecases.AuthenticateUserUseCase;
import com.monclub.domain.usecases.RegisterUserUseCase;
import com.monclub.domain.usecases.GetAllMembersUseCase;
import com.monclub.infrastructure.database.MySQLMembreRepository;
import com.monclub.infrastructure.security.PasswordEncoder;
import com.monclub.presentation.controllers.AuthController;
import com.monclub.presentation.controllers.AdminController;
import com.monclub.presentation.controllers.HomeController;

public class ServletDependencyFactory {
    private static MembreRepository membreRepository;
    private static PasswordEncoder passwordEncoder;
    private static AuthenticationService authenticationService;
    private static AuthController authController;
    private static AdminController adminController;
    private static HomeController homeController;

    static {
        initializeDependencies();
    }

    private static void initializeDependencies() {
        // Infrastructure
        membreRepository = new MySQLMembreRepository();
        passwordEncoder = new PasswordEncoder();

        // Use Cases
        AuthenticateUserUseCase authenticateUserUseCase = new AuthenticateUserUseCase(membreRepository, passwordEncoder);
        RegisterUserUseCase registerUserUseCase = new RegisterUserUseCase(membreRepository, passwordEncoder);
        GetAllMembersUseCase getAllMembersUseCase = new GetAllMembersUseCase(membreRepository);

        // Application Services
        authenticationService = new AuthenticationService(authenticateUserUseCase, registerUserUseCase);

        // Controllers
        authController = new AuthController(authenticationService);
        adminController = new AdminController(getAllMembersUseCase);
        homeController = new HomeController();
    }

    public static AuthController getAuthController() {
        return authController;
    }

    public static AdminController getAdminController() {
        return adminController;
    }

    public static HomeController getHomeController() {
        return homeController;
    }
}
```

## 11. Security Filter (refactored)

### SecurityFilter.java
```java
package com.monclub.presentation.filters;

import java.io.IOException;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebFilter("/*")
public class SecurityFilter implements Filter {

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 
            throws IOException, ServletException {
        
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        
        String requestURI = httpRequest.getRequestURI();
        String contextPath = httpRequest.getContextPath();
        
        // Define URIs
        String loginURI = contextPath + "/connexion";
        String registerURI = contextPath + "/inscription";
        String adminURI = contextPath + "/admin";
        String accueilURI = contextPath + "/accueil";
        
        // Check authentication
        HttpSession session = httpRequest.getSession(false);
        boolean loggedIn = session != null && session.getAttribute("utilisateurRole") != null;
        boolean isAdmin = loggedIn && "admin".equals(session.getAttribute("utilisateurRole"));
        
        // Check request types
        boolean loginRequest = requestURI.equals(loginURI);
        boolean registerRequest = requestURI.equals(registerURI);
        boolean adminRequest = requestURI.equals(adminURI);
        
        // Allow static resources
        if (isStaticResource(requestURI)) {
            chain.doFilter(request, response);
            return;
        }
        
        if (loggedIn) {
            if (adminRequest && !isAdmin) {
                // Non-admin trying to access admin area
                httpResponse.sendRedirect(accueilURI);
            } else {
                // User is logged in and has proper permissions
                chain.doFilter(request, response);
            }
        } else if (loginRequest || registerRequest) {
            // Allow access to login/register pages
            chain.doFilter(request, response);
        } else {
            // Redirect to login if not authenticated
            httpResponse.sendRedirect(loginURI);
        }
    }
    
    private boolean isStaticResource(String requestURI) {
        return requestURI.contains("/css/") || 
               requestURI.contains("/js/") || 
               requestURI.contains("/images/") ||
               requestURI.endsWith(".css") ||
               requestURI.endsWith(".js") ||
               requestURI.endsWith(".png") ||
               requestURI.endsWith(".jpg") ||
               requestURI.endsWith(".gif");
    }

    @Override
    public void init(FilterConfig fConfig) throws ServletException {}

    @Override
    public void destroy() {}
}
```

## 12. Inscription Servlet (Missing from original)

### InscriptionServlet.java
```java
package com.monclub.presentation.servlets;

import java.io.IOException;
import com.monclub.application.dto.RegisterRequest;
import com.monclub.application.dto.AuthenticationResult;
import com.monclub.presentation.controllers.AuthController;
import com.monclub.domain.entities.Membre;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/inscription")
public class InscriptionServlet extends HttpServlet {
    private AuthController authController;

    @Override
    public void init() throws ServletException {
        authController = ServletDependencyFactory.getAuthController();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        request.getRequestDispatcher("/WEB-INF/connexionXinscription.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        RegisterRequest registerRequest = new RegisterRequest();
        registerRequest.setNom(request.getParameter("nom"));
        registerRequest.setPrenom(request.getParameter("prenom"));
        registerRequest.setEmail(request.getParameter("email"));
        registerRequest.setMotDePasse(request.getParameter("motDePasse"));
        registerRequest.setTypeAbonnement(request.getParameter("typeAbonnement"));

        AuthenticationResult result = authController.register(registerRequest);

        if (result.isSuccess()) {
            Membre membre = result.getMembre();
            authController.createUserSession(request.getSession(), membre);
            response.sendRedirect(request.getContextPath() + "/accueil");
        } else {
            request.setAttribute("errorMessage", result.getErrorMessage());
            request.getRequestDispatcher("/WEB-INF/connexionXinscription.jsp").forward(request, response);
        }
    }
}
```

## 13. Main Class

### Main.java
```java
package com.monclub;

import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import com.monclub.domain.usecases.AuthenticateUserUseCase;
import com.monclub.domain.usecases.RegisterUserUseCase;
import com.monclub.domain.usecases.GetAllMembersUseCase;
import com.monclub.infrastructure.database.MySQLMembreRepository;
import com.monclub.infrastructure.security.PasswordEncoder;
import com.monclub.application.services.AuthenticationService;
import com.monclub.application.dto.LoginRequest;
import com.monclub.application.dto.RegisterRequest;
import com.monclub.application.dto.AuthenticationResult;

import java.util.List;
import java.util.Scanner;

public class Main {
    private static AuthenticationService authenticationService;
    private static GetAllMembersUseCase getAllMembersUseCase;
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("=== Application Club de Sport ===");
        System.out.println("Initialisation de l'application...");
        
        initializeApplication();
        
        System.out.println("Application initialisée avec succès!");
        System.out.println("Vous pouvez maintenant démarrer votre serveur web.");
        
        // Demo des fonctionnalités
        runDemo();
    }

    private static void initializeApplication() {
        try {
            // Infrastructure Layer
            MembreRepository membreRepository = new MySQLMembreRepository();
            PasswordEncoder passwordEncoder = new PasswordEncoder();

            // Use Cases Layer
            AuthenticateUserUseCase authenticateUserUseCase = 
                new AuthenticateUserUseCase(membreRepository, passwordEncoder);
            RegisterUserUseCase registerUserUseCase = 
                new RegisterUserUseCase(membreRepository, passwordEncoder);
            getAllMembersUseCase = new GetAllMembersUseCase(membreRepository);

            // Application Layer
            authenticationService = new AuthenticationService(
                authenticateUserUseCase, 
                registerUserUseCase
            );

            System.out.println("✓ Couches d'architecture initialisées");
            System.out.println("✓ Base de données connectée");
            System.out.println("✓ Services configurés");
            
        } catch (Exception e) {
            System.err.println("Erreur lors de l'initialisation: " + e.getMessage());
            System.err.println("Vérifiez votre configuration de base de données.");
        }
    }

    private static void runDemo() {
        System.out.println("\n=== Mode Démonstration ===");
        System.out.println("Voulez-vous tester les fonctionnalités ? (y/n)");
        
        String choice = scanner.nextLine();
        if (!"y".equalsIgnoreCase(choice)) {
            System.out.println("Démonstration ignorée. Application prête.");
            return;
        }

        boolean running = true;
        while (running) {
            showMenu();
            String option = scanner.nextLine();
            
            switch (option) {
                case "1":
                    testRegistration();
                    break;
                case "2":
                    testLogin();
                    break;
                case "3":
                    listAllMembers();
                    break;
                case "4":
                    showArchitectureInfo();
                    break;
                case "0":
                    running = false;
                    break;
                default:
                    System.out.println("Option invalide.");
            }
        }
        
        System.out.println("Démonstration terminée. L'application web est prête à être utilisée.");
    }

    private static void showMenu() {
        System.out.println("\n--- Menu de Démonstration ---");
        System.out.println("1. Tester l'inscription");
        System.out.println("2. Tester la connexion");
        System.out.println("3. Lister tous les membres");
        System.out.println("4. Afficher l'architecture");
        System.out.println("0. Quitter la démonstration");
        System.out.print("Votre choix: ");
    }

    private static void testRegistration() {
        System.out.println("\n--- Test d'Inscription ---");
        System.out.print("Nom: ");
        String nom = scanner.nextLine();
        System.out.print("Prénom: ");
        String prenom = scanner.nextLine();
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("Mot de passe: ");
        String motDePasse = scanner.nextLine();
        System.out.print("Type d'abonnement (mensuel/annuel): ");
        String typeAbonnement = scanner.nextLine();

        RegisterRequest request = new RegisterRequest();
        request.setNom(nom);
        request.setPrenom(prenom);
        request.setEmail(email);
        request.setMotDePasse(motDePasse);
        request.setTypeAbonnement(typeAbonnement);

        try {
            AuthenticationResult result = authenticationService.register(request);
            
            if (result.isSuccess()) {
                System.out.println("✓ Inscription réussie pour: " + result.getMembre().getEmail());
            } else {
                System.out.println("✗ Erreur: " + result.getErrorMessage());
            }
        } catch (Exception e) {
            System.out.println("✗ Erreur technique: " + e.getMessage());
        }
    }

    private static void testLogin() {
        System.out.println("\n--- Test de Connexion ---");
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("Mot de passe: ");
        String motDePasse = scanner.nextLine();

        LoginRequest request = new LoginRequest(email, motDePasse);

        try {
            AuthenticationResult result = authenticationService.login(request);
            
            if (result.isSuccess()) {
                Membre membre = result.getMembre();
                System.out.println("✓ Connexion réussie!");
                System.out.println("  Nom: " + membre.getNom() + " " + membre.getPrenom());
                System.out.println("  Rôle: " + membre.getRole());
                System.out.println("  Type d'abonnement: " + membre.getTypeAbonnement());
            } else {
                System.out.println("✗ Erreur: " + result.getErrorMessage());
            }
        } catch (Exception e) {
            System.out.println("✗ Erreur technique: " + e.getMessage());
        }
    }

    private static void listAllMembers() {
        System.out.println("\n--- Liste des Membres ---");
        
        try {
            List<Membre> membres = getAllMembersUseCase.execute();
            
            if (membres.isEmpty()) {
                System.out.println("Aucun membre trouvé.");
            } else {
                System.out.println("Nombre total de membres: " + membres.size());
                System.out.println();
                
                for (Membre membre : membres) {
                    System.out.printf("ID: %d | %s %s | %s | Rôle: %s | Abonnement: %s%n",
                        membre.getId(),
                        membre.getPrenom(),
                        membre.getNom(),
                        membre.getEmail(),
                        membre.getRole(),
                        membre.getTypeAbonnement()
                    );
                }
            }
        } catch (Exception e) {
            System.out.println("✗ Erreur lors de la récupération: " + e.getMessage());
        }
    }

    private static void showArchitectureInfo() {
        System.out.println("\n=== Architecture Clean du Projet ===");
        System.out.println();
        System.out.println("📁 COUCHES DE L'APPLICATION:");
        System.out.println();
        
        System.out.println("1️⃣  DOMAIN LAYER (Cœur métier)");
        System.out.println("   ├── Entities: Membre");
        System.out.println("   ├── Repositories: MembreRepository (interface)");
        System.out.println("   └── Use Cases: AuthenticateUser, RegisterUser, GetAllMembers");
        System.out.println();
        
        System.out.println("2️⃣  APPLICATION LAYER (Services applicatifs)");
        System.out.println("   ├── Services: AuthenticationService");
        System.out.println("   └── DTOs: LoginRequest, RegisterRequest, AuthenticationResult");
        System.out.println();
        
        System.out.println("3️⃣  INFRASTRUCTURE LAYER (Détails techniques)");
        System.out.println("   ├── Database: MySQLMembreRepository, DatabaseConnection");
        System.out.println("   ├── Security: PasswordEncoder (BCrypt)");
        System.out.println("   └── Config: DatabaseConfig");
        System.out.println();
        
        System.out.println("4️⃣  PRESENTATION LAYER (Interface utilisateur)");
        System.out.println("   ├── Controllers: AuthController, AdminController, HomeController");
        System.out.println("   ├── Servlets: ConnexionServlet, InscriptionServlet, AdminServlet");
        System.out.println("   ├── Filters: SecurityFilter");
        System.out.println("   └── Views: JSP files");
        System.out.println();
        
        System.out.println("🔄 FLUX DE DONNÉES:");
        System.out.println("   Web Request → Servlet → Controller → Service → Use Case → Repository → Database");
        System.out.println();
        
        System.out.println("✅ AVANTAGES DE CETTE ARCHITECTURE:");
        System.out.println("   • Séparation claire des responsabilités");
        System.out.println("   • Testabilité améliorée");
        System.out.println("   • Indépendance des couches");
        System.out.println("   • Facilité de maintenance");
        System.out.println("   • Évolutivité du code");
        System.out.println();
    }
}
```

## 14. Configuration Files

### db.properties
```properties
db.url=jdbc:mysql://localhost:3306/club_sport
db.username=root
db.password=
```

### web.xml (WEB-INF/web.xml)
```xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    
    <display-name>Club de Sport - Clean Architecture</display-name>
    
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    
    <!-- Configuration des filtres et servlets se fait via annotations -->
</web-xml>
```

## 15. JSP Files (updated with better structure)

### index.jsp
```jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Club de Sport - Accueil</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Bienvenue au Club de Sport</h1>
        <p>Application développée avec Clean Architecture</p>
        
        <div class="options">
            <a href="${pageContext.request.contextPath}/connexion" class="btn">Se connecter</a>
            <a href="${pageContext.request.contextPath}/inscription" class="btn">S'inscrire</a>
        </div>
        
        <div class="architecture-info">
            <h3>Architecture Clean</h3>
            <ul>
                <li>Domain Layer (Entities, Use Cases)</li>
                <li>Application Layer (Services, DTOs)</li>
                <li>Infrastructure Layer (Database, Security)</li>
                <li>Presentation Layer (Controllers, Servlets)</li>
            </ul>
        </div>
    </div>
</body>
</html>
```

### connexionXinscription.jsp
```jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Connexion & Inscription</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div class="container" id="container">
        <!-- Formulaire de Connexion -->
        <div class="form-container sign-in-container">
            <form action="${pageContext.request.contextPath}/connexion" method="post">
                <h1>Se connecter</h1>
                <input type="email" name="email" placeholder="Email" required />
                <input type="password" name="motDePasse" placeholder="Mot de passe" required />
                <button type="submit">Se connecter</button>
                
                <% if (request.getAttribute("errorMessage") != null) { %>
                    <p class="error"><%= request.getAttribute("errorMessage") %></p>
                <% } %>
            </form>
        </div>
        
        <!-- Formulaire d'Inscription -->
        <div class="form-container sign-up-container">
            <form action="${pageContext.request.contextPath}/inscription" method="post">
                <h1>S'inscrire</h1>
                <input type="text" name="nom" placeholder="Nom" required />
                <input type="text" name="prenom" placeholder="Prénom" required />
                <input type="email" name="email" placeholder="Email" required />
                <input type="password" name="motDePasse" placeholder="Mot de passe" required />
                <select name="typeAbonnement" required>
                    <option value="">Type d'abonnement</option>
                    <option value="mensuel">Mensuel</option>
                    <option value="annuel">Annuel</option>
                </select>
                <button type="submit">S'inscrire</button>
            </form>
        </div>
        
        <!-- Overlay pour basculer entre les formulaires -->
        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-left">
                    <h1>Bon retour!</h1>
                    <p>Pour rester connecté avec nous, connectez-vous avec vos informations personnelles</p>
                    <button class="ghost" id="signIn">Se connecter</button>
                </div>
                <div class="overlay-panel overlay-right">
                    <h1>Bonjour!</h1>
                    <p>Entrez vos données personnelles et commencez votre parcours avec nous</p>
                    <button class="ghost" id="signUp">S'inscrire</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="script.js"></script>
</body>
</html>
```

### accueil.jsp
```jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Accueil - Club de Sport</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div class="dashboard">
        <header>
            <h1><%= request.getAttribute("welcomeMessage") != null ? 
                    request.getAttribute("welcomeMessage") : 
                    "Bienvenue au Club de Sport!" %></h1>
            <div class="user-info">
                <span>Connecté en tant que: <%= session.getAttribute("prenom") %> <%= session.getAttribute("nom") %></span>
                <a href="${pageContext.request.contextPath}/deconnexion" class="btn logout">Déconnexion</a>
            </div>
        </header>
        
        <main>
            <div class="member-info">
                <h2>Vos informations</h2>
                <p><strong>Email:</strong> <%= session.getAttribute("email") %></p>
                <p><strong>Abonnement:</strong> <%= session.getAttribute("typeAbonnement") %></p>
                <p><strong>Rôle:</strong> <%= session.getAttribute("utilisateurRole") %></p>
            </div>
            
            <% if ("admin".equals(session.getAttribute("utilisateurRole"))) { %>
                <div class="admin-section">
                    <h2>Administration</h2>
                    <a href="${pageContext.request.contextPath}/admin" class="btn admin">Gérer les membres</a>
                </div>
            <% } %>
        </main>
    </div>
</body>
</html>
```

### admin.jsp
```jsp
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ page import="java.util.List" %>
<%@ page import="com.monclub.domain.entities.Membre" %>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Administration - Club de Sport</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>
    <div class="admin-dashboard">
        <header>
            <h1>Administration - Gestion des Membres</h1>
            <div class="nav">
                <a href="${pageContext.request.contextPath}/accueil" class="btn">Retour à l'accueil</a>
                <a href="${pageContext.request.contextPath}/deconnexion" class="btn logout">Déconnexion</a>
            </div>
        </header>
        
        <main>
            <div class="members-list">
                <h2>Liste des Membres</h2>
                
                <% 
                List<Membre> membres = (List<Membre>) request.getAttribute("membres");
                if (membres != null && !membres.isEmpty()) { 
                %>
                    <table class="members-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Nom</th>
                                <th>Prénom</th>
                                <th>Email</th>
                                <th>Abonnement</th>
                                <th>Rôle</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% for (Membre membre : membres) { %>
                                <tr>
                                    <td><%= membre.getId() %></td>
                                    <td><%= membre.getNom() %></td>
                                    <td><%= membre.getPrenom() %></td>
                                    <td><%= membre.getEmail() %></td>
                                    <td><%= membre.getTypeAbonnement() %></td>
                                    <td><%= membre.getRole() %></td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                    
                    <div class="stats">
                        <p><strong>Total des membres:</strong> <%= membres.size() %></p>
                    </div>
                <% } else { %>
                    <p class="no-data">Aucun membre trouvé.</p>
                <% } %>
            </div>
        </main>
    </div>
</body>
</html>
```

## 16. Instructions de Déploiement

### Comment exécuter l'application:

1. **Base de données MySQL:**
   ```sql
   CREATE DATABASE club_sport;
   USE club_sport;
   
   CREATE TABLE membres (
       id INT AUTO_INCREMENT PRIMARY KEY,
       nom VARCHAR(100) NOT NULL,
       prenom VARCHAR(100) NOT NULL,
       email VARCHAR(150) UNIQUE NOT NULL,
       mot_de_passe VARCHAR(255) NOT NULL,
       type_abonnement VARCHAR(50) NOT NULL,
       role VARCHAR(20) DEFAULT 'membre'
   );
   
   -- Créer un admin par défaut
   INSERT INTO membres (nom, prenom, email, mot_de_passe, type_abonnement, role) 
   VALUES ('Admin', 'System', 'admin@club.com', '$2a$10$...', 'annuel', 'admin');
   ```

2. **Dépendances Maven (pom.xml):**
   ```xml
   <dependencies>
       <dependency>
           <groupId>mysql</groupId>
           <artifactId>mysql-connector-java</artifactId>
           <version>8.0.33</version>
       </dependency>
       <dependency>
           <groupId>org.mindrot</groupId>
           <artifactId>jbcrypt</artifactId>
           <version>0.4</version>
       </dependency>
       <dependency>
           <groupId>jakarta.servlet</groupId>
           <artifactId>jakarta.servlet-api</artifactId>
           <version>5.0.0</version>
           <scope>provided</scope>
       </dependency>
   </dependencies>
   ```

3. **Exécution:**
   ```bash
   # Compiler le projet
   mvn clean compile
   mvn jetty:run
   
   # Exécuter la classe Main pour la démonstration
   java -cp target/classes com.monclub.Main
   
   # Déployer sur Tomcat pour l'interface web
   mvn clean package
   # Copier le WAR dans webapps/ de Tomcat
   ```

Cette architecture Clean sépare clairement les responsabilités et rend le code maintenable, testable et évolutif.