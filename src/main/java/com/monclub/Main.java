package com.monclub;

import java.util.List;
import java.util.Scanner;

import com.monclub.application.dto.AuthenticationResult;
import com.monclub.application.dto.LoginRequest;
import com.monclub.application.dto.RegisterRequest;
import com.monclub.application.services.AuthenticationService;
import com.monclub.domain.entities.Membre;
import com.monclub.domain.repositories.MembreRepository;
import com.monclub.domain.usecases.AuthenticateUserUseCase;
import com.monclub.domain.usecases.GetAllMembersUseCase;
import com.monclub.domain.usecases.RegisterUserUseCase;
import com.monclub.infrastructure.database.MySQLMembreRepository;
import com.monclub.infrastructure.security.PasswordEncoder;

public class Main {
    private static AuthenticationService authenticationService;
    private static GetAllMembersUseCase getAllMembersUseCase;
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("=== Application Club de Sport ===");
        System.out.println("Initialisation de l'application...");
        
        initializeApplication();
        
        System.out.println("Application initialis√©e avec succ√®s!");
        System.out.println("Vous pouvez maintenant d√©marrer votre serveur web.");
        
        runDemo();
    }

    private static void initializeApplication() {
        try {
            MembreRepository membreRepository = new MySQLMembreRepository();
            PasswordEncoder passwordEncoder = new PasswordEncoder();

            AuthenticateUserUseCase authenticateUserUseCase = 
                new AuthenticateUserUseCase(membreRepository, passwordEncoder);
            RegisterUserUseCase registerUserUseCase = 
                new RegisterUserUseCase(membreRepository, passwordEncoder);
            getAllMembersUseCase = new GetAllMembersUseCase(membreRepository);

            authenticationService = new AuthenticationService(
                authenticateUserUseCase, 
                registerUserUseCase
            );

            System.out.println("‚úì Couches d'architecture initialis√©es");
            System.out.println("‚úì Base de donn√©es connect√©e");
            System.out.println("‚úì Services configur√©s");
            
        } catch (Exception e) {
            System.err.println("Erreur lors de l'initialisation: " + e.getMessage());
            System.err.println("V√©rifiez votre configuration de base de donn√©es.");
        }
    }

    private static void runDemo() {
        System.out.println("\n=== Mode D√©monstration ===");
        System.out.println("Voulez-vous tester les fonctionnalit√©s ? (y/n)");
        
        String choice = scanner.nextLine();
        if (!"y".equalsIgnoreCase(choice)) {
            System.out.println("D√©monstration ignor√©e. Application pr√™te.");
            return;
        }

        boolean running = true;
        while (running) {
            showMenu();
            String option = scanner.nextLine();
            
            switch (option) {
                case "1":
                    testRegistration();
                    break;
                case "2":
                    testLogin();
                    break;
                case "3":
                    listAllMembers();
                    break;
                case "4":
                    showArchitectureInfo();
                    break;
                case "0":
                    running = false;
                    break;
                default:
                    System.out.println("Option invalide.");
            }
        }
        
        System.out.println("D√©monstration termin√©e. L'application web est pr√™te √† √™tre utilis√©e.");
    }

    private static void showMenu() {
        System.out.println("\n--- Menu de D√©monstration ---");
        System.out.println("1. Tester l'inscription");
        System.out.println("2. Tester la connexion");
        System.out.println("3. Lister tous les membres");
        System.out.println("4. Afficher l'architecture");
        System.out.println("0. Quitter la d√©monstration");
        System.out.print("Votre choix: ");
    }

    private static void testRegistration() {
        System.out.println("\n--- Test d'Inscription ---");
        System.out.print("Nom: ");
        String nom = scanner.nextLine();
        System.out.print("Pr√©nom: ");
        String prenom = scanner.nextLine();
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("Mot de passe: ");
        String motDePasse = scanner.nextLine();
        System.out.print("Type d'abonnement (mensuel/annuel): ");
        String typeAbonnement = scanner.nextLine();

        RegisterRequest request = new RegisterRequest();
        request.setNom(nom);
        request.setPrenom(prenom);
        request.setEmail(email);
        request.setMotDePasse(motDePasse);
        request.setTypeAbonnement(typeAbonnement);

        try {
            AuthenticationResult result = authenticationService.register(request);
            
            if (result.isSuccess()) {
                System.out.println("‚úì Inscription r√©ussie pour: " + result.getMembre().getEmail());
            } else {
                System.out.println("‚úó Erreur: " + result.getErrorMessage());
            }
        } catch (Exception e) {
            System.out.println("‚úó Erreur technique: " + e.getMessage());
        }
    }

    private static void testLogin() {
        System.out.println("\n--- Test de Connexion ---");
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("Mot de passe: ");
        String motDePasse = scanner.nextLine();

        LoginRequest request = new LoginRequest(email, motDePasse);

        try {
            AuthenticationResult result = authenticationService.login(request);
            
            if (result.isSuccess()) {
                Membre membre = result.getMembre();
                System.out.println("‚úì Connexion r√©ussie!");
                System.out.println("  Nom: " + membre.getNom() + " " + membre.getPrenom());
                System.out.println("  R√¥le: " + membre.getRole());
                System.out.println("  Type d'abonnement: " + membre.getTypeAbonnement());
            } else {
                System.out.println("‚úó Erreur: " + result.getErrorMessage());
            }
        } catch (Exception e) {
            System.out.println("‚úó Erreur technique: " + e.getMessage());
        }
    }

    private static void listAllMembers() {
        System.out.println("\n--- Liste des Membres ---");
        
        try {
            List<Membre> membres = getAllMembersUseCase.execute();
            
            if (membres.isEmpty()) {
                System.out.println("Aucun membre trouv√©.");
            } else {
                System.out.println("Nombre total de membres: " + membres.size());
                System.out.println();
                
                for (Membre membre : membres) {
                    System.out.printf("ID: %d | %s %s | %s | R√¥le: %s | Abonnement: %s%n",
                        membre.getId(),
                        membre.getPrenom(),
                        membre.getNom(),
                        membre.getEmail(),
                        membre.getRole(),
                        membre.getTypeAbonnement()
                    );
                }
            }
        } catch (Exception e) {
            System.out.println("‚úó Erreur lors de la r√©cup√©ration: " + e.getMessage());
        }
    }

    private static void showArchitectureInfo() {
        System.out.println("\n=== Architecture Clean du Projet ===");
        System.out.println();
        System.out.println("üìÅ COUCHES DE L'APPLICATION:");
        System.out.println();
        
        System.out.println("1Ô∏è‚É£  DOMAIN LAYER (C≈ìur m√©tier)");
        System.out.println("   ‚îú‚îÄ‚îÄ Entities: Membre");
        System.out.println("   ‚îú‚îÄ‚îÄ Repositories: MembreRepository (interface)");
        System.out.println("   ‚îî‚îÄ‚îÄ Use Cases: AuthenticateUser, RegisterUser, GetAllMembers");
        System.out.println();
        
        System.out.println("2Ô∏è‚É£  APPLICATION LAYER (Services applicatifs)");
        System.out.println("   ‚îú‚îÄ‚îÄ Services: AuthenticationService");
        System.out.println("   ‚îî‚îÄ‚îÄ DTOs: LoginRequest, RegisterRequest, AuthenticationResult");
        System.out.println();
        
        System.out.println("3Ô∏è‚É£  INFRASTRUCTURE LAYER (D√©tails techniques)");
        System.out.println("   ‚îú‚îÄ‚îÄ Database: MySQLMembreRepository, DatabaseConnection");
        System.out.println("   ‚îú‚îÄ‚îÄ Security: PasswordEncoder (BCrypt)");
        System.out.println("   ‚îî‚îÄ‚îÄ Config: DatabaseConfig");
        System.out.println();
        
        System.out.println("4Ô∏è‚É£  PRESENTATION LAYER (Interface utilisateur)");
        System.out.println("   ‚îú‚îÄ‚îÄ Controllers: AuthController, AdminController, HomeController");
        System.out.println("   ‚îú‚îÄ‚îÄ Servlets: ConnexionServlet, InscriptionServlet, AdminServlet");
        System.out.println("   ‚îú‚îÄ‚îÄ Filters: SecurityFilter");
        System.out.println("   ‚îî‚îÄ‚îÄ Views: JSP files");
        System.out.println();
        
        System.out.println("üîÑ FLUX DE DONN√âES:");
        System.out.println("   Web Request ‚Üí Servlet ‚Üí Controller ‚Üí Service ‚Üí Use Case ‚Üí Repository ‚Üí Database");
        System.out.println();
        
        System.out.println("‚úÖ AVANTAGES DE CETTE ARCHITECTURE:");
        System.out.println("   ‚Ä¢ S√©paration claire des responsabilit√©s");
        System.out.println("   ‚Ä¢ Testabilit√© am√©lior√©e");
        System.out.println("   ‚Ä¢ Ind√©pendance des couches");
        System.out.println("   ‚Ä¢ Facilit√© de maintenance");
        System.out.println("   ‚Ä¢ √âvolutivit√© du code");
        System.out.println();
    }
}